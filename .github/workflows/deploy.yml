name: 🚀 Deploy SkillVerse to VPS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  deploy:
    name: 🏗️ Build & Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'skillverse-prototype/package-lock.json'

    - name: ☕ Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'maven'

    - name: 🏗️ Test Build Frontend
      working-directory: ./skillverse-prototype
      run: |
        npm ci --silent
        npm run build

    - name: 🏗️ Test Build Backend  
      working-directory: ./SkillVerse_BackEnd
      run: |
        chmod +x mvnw
        ./mvnw clean package -DskipTests -q

    - name: 🧪 Run Tests
      working-directory: ./SkillVerse_BackEnd
      run: ./mvnw test -q

    - name: 🐳 Check Docker Compose
      run: |
        docker --version
        docker compose version

    - name: 🚀 Deploy to VPS
      if: github.ref == 'refs/heads/main'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        command_timeout: 10m
        script: |
          set -e
          
          echo "🔄 Starting deployment..."
          
          # Navigate to project directory
          cd ${{ secrets.VPS_PROJECT_PATH }}
          
          # Backup current state
          echo "💾 Creating backup..."
          docker compose ps > deployment_backup_$(date +%Y%m%d_%H%M%S).log || true
          
          # Pull latest code
          echo "📥 Pulling latest code..."
          git fetch --all
          git reset --hard origin/main
          git clean -fd
          
          # Check Docker Compose version
          echo "🐳 Docker info..."
          docker --version
          docker compose version
          
          # Cleanup old images (keep last 2 versions)
          echo "🧹 Cleaning up old images..."
          docker image prune -f
          docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}\t{{.CreatedAt}}" | grep -E "(exe201-|skillverse-)" | tail -n +3 | awk '{print $3}' | xargs -r docker rmi -f || true
          
          # Make deploy script executable
          chmod +x deploy.sh
          
          # Run deployment
          echo "🚀 Running deployment..."
          ./deploy.sh
          
          # Verify deployment
          echo "✅ Verifying deployment..."
          sleep 10
          
          # Check containers
          docker compose ps
          
          # Health checks
          echo "🏥 Running health checks..."
          timeout 30 sh -c 'until curl -f http://localhost/health; do echo "Waiting for frontend..."; sleep 2; done'
          timeout 30 sh -c 'until curl -f http://localhost/api/health; do echo "Waiting for API..."; sleep 2; done'
          
          echo "✅ Deployment completed successfully!"

    - name: 📊 Deployment Status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
          exit 1
        fi

    - name: 💬 Notify on Failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '❌ **Deployment Failed**\n\nCommit: ${{ github.sha }}\nWorkflow: ${{ github.workflow }}\nRun: ${{ github.run_id }}'
          })